//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using ProtoBuf;
    
    
    [ProtoContract()]
    public class SceneDataInfo
    {
        
        [ProtoMember(1)]
        public string SceneName;
        
        [ProtoMember(2)]
        public string Path;
        
        public SceneDataInfo()
        {
        }
        
        public SceneDataInfo(string SceneName, string Path)
        {
		this.SceneName = SceneName;
		this.Path = Path;
        }
    }
    
    [ProtoContract()]
    public class SceneDataInfos
    {
        
        [ProtoMember(1)]
        public List<SceneDataInfo> dataInfo = new List<SceneDataInfo>();
        
        public Dictionary<ArraySegment<byte>, SceneDataInfo> datas = new Dictionary<ArraySegment<byte>, SceneDataInfo>(new DataComparer());
        
        public bool Insert(string SceneName, string Path)
        {
		foreach (SceneDataInfo info in dataInfo)
		{
			if(info.SceneName == SceneName)
			{
				return false;
			}
		}
			dataInfo.Add(new SceneDataInfo(SceneName,Path));
			return true;
        }
        
        public void Initialize()
        {
		foreach (var data in dataInfo)
		{
			ArraySegment<byte> bytes = GetIdRule(data.SceneName);
			if (datas.ContainsKey(bytes))
				continue;
			datas.Add(bytes, data);
		}
        }
        
        public SceneDataInfo Get(string SceneName)
        {
		SceneDataInfo value = null;


		if (datas.TryGetValue(GetIdRule(SceneName), out value))
			return value;
		return null;
        }
        
        public System.ArraySegment<byte> GetIdRule(string SceneName)
        {
		ushort total = 0;
		ushort count = 0;
		total += (ushort)SceneName.Length;


		if( total == 0 )
			return default(System.ArraySegment<byte>);


		byte[] bytes = new byte[total];
		byte[] stringBytes;
		stringBytes = System.Text.Encoding.UTF8.GetBytes(SceneName);
		Array.Copy(stringBytes, 0, bytes, 0, stringBytes.Length);
		count += (ushort)SceneName.Length;


		 return new System.ArraySegment<byte>(bytes);
        }
    }
}
