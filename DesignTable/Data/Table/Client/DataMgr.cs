//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    
    
    public class DataComparer : System.Collections.Generic.IEqualityComparer<ArraySegment<byte>>
    {
        
        public bool Equals(System.ArraySegment<byte> x, System.ArraySegment<byte> y)
        {
		return x.SequenceEqual(y);
        }
        
        public int GetHashCode(System.ArraySegment<byte> obj)
        {
		if(obj == null) throw new ArgumentNullException("obj");
		return obj.Sum(y => y);
        }
    }
    
    public enum TableId
    {
        
        AtlasData = 1023,
        
        buff = 1014,
        
        monster_boss = 1018,
        
        monster_deploy = 1019,
        
        monster_master = 1016,
        
        monster_normal = 1017,
        
        passive = 1021,
        
        projectile = 1022,
        
        quest = 1020,
        
        skill = 1013,
        
        skill_effect = 1015,
        
        user_character = 1011,
    }
    
    public class DataMgr
    {
        
        private delegate void LoadHandler(byte[] data);
        
        private delegate void ClearHandler();
        
        private Dictionary<int, DataMgr.LoadHandler> loadHandlerList = new Dictionary<int, LoadHandler>();
        
        private Dictionary<int, DataMgr.ClearHandler> clearHandlerList = new Dictionary<int, ClearHandler>();
        
        private bool isCallInit = false;
        
        private DataMessageSerializer serializer = new DataMessageSerializer();
        
        private AtlasDataInfos atlasDataInfos;
        
        public AtlasDataInfos AtlasDataInfos => atlasDataInfos;
        
        private buffInfos buffInfos;
        
        public buffInfos BuffInfos => buffInfos;
        
        private monster_bossInfos monster_bossInfos;
        
        public monster_bossInfos Monster_bossInfos => monster_bossInfos;
        
        private monster_deployInfos monster_deployInfos;
        
        public monster_deployInfos Monster_deployInfos => monster_deployInfos;
        
        private monster_masterInfos monster_masterInfos;
        
        public monster_masterInfos Monster_masterInfos => monster_masterInfos;
        
        private monster_normalInfos monster_normalInfos;
        
        public monster_normalInfos Monster_normalInfos => monster_normalInfos;
        
        private passiveInfos passiveInfos;
        
        public passiveInfos PassiveInfos => passiveInfos;
        
        private projectileInfos projectileInfos;
        
        public projectileInfos ProjectileInfos => projectileInfos;
        
        private questInfos questInfos;
        
        public questInfos QuestInfos => questInfos;
        
        private skillInfos skillInfos;
        
        public skillInfos SkillInfos => skillInfos;
        
        private skill_effectInfos skill_effectInfos;
        
        public skill_effectInfos Skill_effectInfos => skill_effectInfos;
        
        private user_characterInfos user_characterInfos;
        
        public user_characterInfos User_characterInfos => user_characterInfos;
        
        public void Init()
        {
		if (isCallInit)
			return;
		RegisterLoadHandler();
		RegisterClearHandler();
		isCallInit = true;
        }
        
        public void LoadData(TableId dataType, byte[] data)
        {
		loadHandlerList[(int)dataType](data);
        }
        
        public void ClearData(TableId[] dataTypes)
        {
		foreach (int dataType in dataTypes)
		{ 
			clearHandlerList[dataType]();
		}
        }
        
        public void ClearData(TableId dataType)
        {
		clearHandlerList[(int)dataType]();
        }
        
        public void ClearDataAll()
        {
		foreach (DataMgr.ClearHandler clearHandler in clearHandlerList.Values)
		{
			clearHandler();
		}
        }
        
        private void RegisterLoadHandler()
        {
		loadHandlerList.Add(1023, new DataMgr.LoadHandler(LoadAtlasDataInfos));
		loadHandlerList.Add(1014, new DataMgr.LoadHandler(LoadbuffInfos));
		loadHandlerList.Add(1018, new DataMgr.LoadHandler(Loadmonster_bossInfos));
		loadHandlerList.Add(1019, new DataMgr.LoadHandler(Loadmonster_deployInfos));
		loadHandlerList.Add(1016, new DataMgr.LoadHandler(Loadmonster_masterInfos));
		loadHandlerList.Add(1017, new DataMgr.LoadHandler(Loadmonster_normalInfos));
		loadHandlerList.Add(1021, new DataMgr.LoadHandler(LoadpassiveInfos));
		loadHandlerList.Add(1022, new DataMgr.LoadHandler(LoadprojectileInfos));
		loadHandlerList.Add(1020, new DataMgr.LoadHandler(LoadquestInfos));
		loadHandlerList.Add(1013, new DataMgr.LoadHandler(LoadskillInfos));
		loadHandlerList.Add(1015, new DataMgr.LoadHandler(Loadskill_effectInfos));
		loadHandlerList.Add(1011, new DataMgr.LoadHandler(Loaduser_characterInfos));
        }
        
        private void RegisterClearHandler()
        {
		clearHandlerList.Add(1023, ClearDataAtlasDataInfos);
		clearHandlerList.Add(1014, ClearDatabuffInfos);
		clearHandlerList.Add(1018, ClearDatamonster_bossInfos);
		clearHandlerList.Add(1019, ClearDatamonster_deployInfos);
		clearHandlerList.Add(1016, ClearDatamonster_masterInfos);
		clearHandlerList.Add(1017, ClearDatamonster_normalInfos);
		clearHandlerList.Add(1021, ClearDatapassiveInfos);
		clearHandlerList.Add(1022, ClearDataprojectileInfos);
		clearHandlerList.Add(1020, ClearDataquestInfos);
		clearHandlerList.Add(1013, ClearDataskillInfos);
		clearHandlerList.Add(1015, ClearDataskill_effectInfos);
		clearHandlerList.Add(1011, ClearDatauser_characterInfos);
        }
        
        private void LoadAtlasDataInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			atlasDataInfos = serializer.Deserialize(1023,data) as AtlasDataInfos;
			atlasDataInfos.Initialize();
		}
        }
        
        private void LoadbuffInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			buffInfos = serializer.Deserialize(1014,data) as buffInfos;
			buffInfos.Initialize();
		}
        }
        
        private void Loadmonster_bossInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			monster_bossInfos = serializer.Deserialize(1018,data) as monster_bossInfos;
			monster_bossInfos.Initialize();
		}
        }
        
        private void Loadmonster_deployInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			monster_deployInfos = serializer.Deserialize(1019,data) as monster_deployInfos;
			monster_deployInfos.Initialize();
		}
        }
        
        private void Loadmonster_masterInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			monster_masterInfos = serializer.Deserialize(1016,data) as monster_masterInfos;
			monster_masterInfos.Initialize();
		}
        }
        
        private void Loadmonster_normalInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			monster_normalInfos = serializer.Deserialize(1017,data) as monster_normalInfos;
			monster_normalInfos.Initialize();
		}
        }
        
        private void LoadpassiveInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			passiveInfos = serializer.Deserialize(1021,data) as passiveInfos;
			passiveInfos.Initialize();
		}
        }
        
        private void LoadprojectileInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			projectileInfos = serializer.Deserialize(1022,data) as projectileInfos;
			projectileInfos.Initialize();
		}
        }
        
        private void LoadquestInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			questInfos = serializer.Deserialize(1020,data) as questInfos;
			questInfos.Initialize();
		}
        }
        
        private void LoadskillInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			skillInfos = serializer.Deserialize(1013,data) as skillInfos;
			skillInfos.Initialize();
		}
        }
        
        private void Loadskill_effectInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			skill_effectInfos = serializer.Deserialize(1015,data) as skill_effectInfos;
			skill_effectInfos.Initialize();
		}
        }
        
        private void Loaduser_characterInfos(byte[] data)
        {
		using (MemoryStream memoryStream = new MemoryStream(data))
		{
			user_characterInfos = serializer.Deserialize(1011,data) as user_characterInfos;
			user_characterInfos.Initialize();
		}
        }
        
        private void ClearDataAtlasDataInfos()
        {
		if(AtlasDataInfos != null)
			atlasDataInfos=null;
        }
        
        private void ClearDatabuffInfos()
        {
		if(buffInfos != null)
			buffInfos=null;
        }
        
        private void ClearDatamonster_bossInfos()
        {
		if(monster_bossInfos != null)
			monster_bossInfos=null;
        }
        
        private void ClearDatamonster_deployInfos()
        {
		if(monster_deployInfos != null)
			monster_deployInfos=null;
        }
        
        private void ClearDatamonster_masterInfos()
        {
		if(monster_masterInfos != null)
			monster_masterInfos=null;
        }
        
        private void ClearDatamonster_normalInfos()
        {
		if(monster_normalInfos != null)
			monster_normalInfos=null;
        }
        
        private void ClearDatapassiveInfos()
        {
		if(passiveInfos != null)
			passiveInfos=null;
        }
        
        private void ClearDataprojectileInfos()
        {
		if(projectileInfos != null)
			projectileInfos=null;
        }
        
        private void ClearDataquestInfos()
        {
		if(questInfos != null)
			questInfos=null;
        }
        
        private void ClearDataskillInfos()
        {
		if(skillInfos != null)
			skillInfos=null;
        }
        
        private void ClearDataskill_effectInfos()
        {
		if(skill_effectInfos != null)
			skill_effectInfos=null;
        }
        
        private void ClearDatauser_characterInfos()
        {
		if(user_characterInfos != null)
			user_characterInfos=null;
        }
        
        public void SetUpRef()
        {
		skillInfos.SetupRef_item_Id(buffInfos);
		skillInfos.SetupRef_item_Id(skill_effectInfos);
		skillInfos.SetupRef_item_Id(projectileInfos);
        }
    }
}
