//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using ProtoBuf;
    
    
    [ProtoContract()]
    public class skill_effectInfo
    {
        
        [ProtoMember(1)]
        public int effect_Id;
        
        [ProtoMember(2)]
        public string effect_path;
        
        public skill_effectInfo()
        {
        }
        
        public skill_effectInfo(int effect_Id, string effect_path)
        {
		this.effect_Id = effect_Id;
		this.effect_path = effect_path;
        }
    }
    
    [ProtoContract()]
    public class skill_effectInfos
    {
        
        [ProtoMember(1)]
        public List<skill_effectInfo> dataInfo = new List<skill_effectInfo>();
        
        public Dictionary<ArraySegment<byte>, skill_effectInfo> datas = new Dictionary<ArraySegment<byte>, skill_effectInfo>(new DataComparer());
        
        public bool Insert(int effect_Id, string effect_path)
        {
		foreach (skill_effectInfo info in dataInfo)
		{
			if(info.effect_Id == effect_Id)
			{
				return false;
			}
		}
			dataInfo.Add(new skill_effectInfo(effect_Id,effect_path));
			return true;
        }
        
        public void Initialize()
        {
		foreach (var data in dataInfo)
		{
			ArraySegment<byte> bytes = GetIdRule(data.effect_Id);
			if (datas.ContainsKey(bytes))
				continue;
			datas.Add(bytes, data);
		}
        }
        
        public skill_effectInfo Get(int effect_Id)
        {
		skill_effectInfo value = null;


		if (datas.TryGetValue(GetIdRule(effect_Id), out value))
			return value;
		return null;
        }
        
        public System.ArraySegment<byte> GetIdRule(int effect_Id)
        {
		ushort total = 0;
		ushort count = 0;
		total += sizeof(int);


		if( total == 0 )
			return default(System.ArraySegment<byte>);


		byte[] bytes = new byte[total];
		Array.Copy(BitConverter.GetBytes(effect_Id), 0, bytes, count, sizeof(int));
		count += sizeof(int);


		 return new System.ArraySegment<byte>(bytes);
        }
    }
}
