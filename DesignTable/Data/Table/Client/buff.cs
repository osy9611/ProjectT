//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using ProtoBuf;
    
    
    [ProtoContract()]
    public class buffInfo
    {
        
        [ProtoMember(1)]
        public int buff_Id;
        
        [ProtoMember(2)]
        public sbyte buff_type;
        
        [ProtoMember(3)]
        public float buff_duration;
        
        [ProtoMember(4)]
        public float buff_interval;
        
        [ProtoMember(5)]
        public bool buff_usePercent;
        
        [ProtoMember(6)]
        public float buff_arg1;
        
        [ProtoMember(7)]
        public float buff_arg2;
        
        [ProtoMember(8)]
        public float buff_arg3;
        
        [ProtoMember(9)]
        public string buff_arg4;
        
        public buffInfo()
        {
        }
        
        public buffInfo(int buff_Id, sbyte buff_type, float buff_duration, float buff_interval, bool buff_usePercent, float buff_arg1, float buff_arg2, float buff_arg3, string buff_arg4)
        {
		this.buff_Id = buff_Id;
		this.buff_type = buff_type;
		this.buff_duration = buff_duration;
		this.buff_interval = buff_interval;
		this.buff_usePercent = buff_usePercent;
		this.buff_arg1 = buff_arg1;
		this.buff_arg2 = buff_arg2;
		this.buff_arg3 = buff_arg3;
		this.buff_arg4 = buff_arg4;
        }
    }
    
    [ProtoContract()]
    public class buffInfos
    {
        
        [ProtoMember(1)]
        public List<buffInfo> dataInfo = new List<buffInfo>();
        
        public Dictionary<ArraySegment<byte>, buffInfo> datas = new Dictionary<ArraySegment<byte>, buffInfo>(new DataComparer());
        
        public bool Insert(int buff_Id, sbyte buff_type, float buff_duration, float buff_interval, bool buff_usePercent, float buff_arg1, float buff_arg2, float buff_arg3, string buff_arg4)
        {
		foreach (buffInfo info in dataInfo)
		{
			if(info.buff_Id == buff_Id)
			{
				return false;
			}
		}
			dataInfo.Add(new buffInfo(buff_Id,buff_type,buff_duration,buff_interval,buff_usePercent,buff_arg1,buff_arg2,buff_arg3,buff_arg4));
			return true;
        }
        
        public void Initialize()
        {
		foreach (var data in dataInfo)
		{
			ArraySegment<byte> bytes = GetIdRule(data.buff_Id);
			if (datas.ContainsKey(bytes))
				continue;
			datas.Add(bytes, data);
		}
        }
        
        public buffInfo Get(int buff_Id)
        {
		buffInfo value = null;


		if (datas.TryGetValue(GetIdRule(buff_Id), out value))
			return value;
		return null;
        }
        
        public System.ArraySegment<byte> GetIdRule(int buff_Id)
        {
		ushort total = 0;
		ushort count = 0;
		total += sizeof(int);


		if( total == 0 )
			return default(System.ArraySegment<byte>);


		byte[] bytes = new byte[total];
		Array.Copy(BitConverter.GetBytes(buff_Id), 0, bytes, count, sizeof(int));
		count += sizeof(int);


		 return new System.ArraySegment<byte>(bytes);
        }
    }
}
