//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using ProtoBuf;
    
    
    [ProtoContract()]
    public class AtlasDataInfo
    {
        
        [ProtoMember(1)]
        public int AtlasType;
        
        [ProtoMember(2)]
        public string Path;
        
        public AtlasDataInfo()
        {
        }
        
        public AtlasDataInfo(int AtlasType, string Path)
        {
		this.AtlasType = AtlasType;
		this.Path = Path;
        }
    }
    
    [ProtoContract()]
    public class AtlasDataInfos
    {
        
        [ProtoMember(1)]
        public List<AtlasDataInfo> dataInfo = new List<AtlasDataInfo>();
        
        public Dictionary<ArraySegment<byte>, AtlasDataInfo> datas = new Dictionary<ArraySegment<byte>, AtlasDataInfo>(new DataComparer());
        
        public bool Insert(int AtlasType, string Path)
        {
		foreach (AtlasDataInfo info in dataInfo)
		{
			if(info.AtlasType == AtlasType)
			{
				return false;
			}
		}
			dataInfo.Add(new AtlasDataInfo(AtlasType,Path));
			return true;
        }
        
        public void Initialize()
        {
		foreach (var data in dataInfo)
		{
			ArraySegment<byte> bytes = GetIdRule(data.AtlasType);
			if (datas.ContainsKey(bytes))
				continue;
			datas.Add(bytes, data);
		}
        }
        
        public AtlasDataInfo Get(int AtlasType)
        {
		AtlasDataInfo value = null;


		if (datas.TryGetValue(GetIdRule(AtlasType), out value))
			return value;
		return null;
        }
        
        public System.ArraySegment<byte> GetIdRule(int AtlasType)
        {
		ushort total = 0;
		ushort count = 0;
		total += sizeof(int);


		if( total == 0 )
			return default(System.ArraySegment<byte>);


		byte[] bytes = new byte[total];
		Array.Copy(BitConverter.GetBytes(AtlasType), 0, bytes, count, sizeof(int));
		count += sizeof(int);


		 return new System.ArraySegment<byte>(bytes);
        }
    }
}
