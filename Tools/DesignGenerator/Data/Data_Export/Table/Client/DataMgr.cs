//------------------------------------------------------------------------------
// <auto-generated>
//     �� �ڵ�� ������ ����Ͽ� �����Ǿ����ϴ�.
//     ��Ÿ�� ����:4.0.30319.42000
//
//     ���� ������ �����ϸ� �߸��� ������ �߻��� �� ������, �ڵ带 �ٽ� �����ϸ�
//     �̷��� ���� ������ �սǵ˴ϴ�.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesignTable
{
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    
    
    public class DataComparer : System.Collections.Generic.IEqualityComparer<ArraySegment<byte>>
    {
        
        public bool Equals(System.ArraySegment<byte> x, System.ArraySegment<byte> y)
        {
		return x.SequenceEqual(y);
        }
        
        public int GetHashCode(System.ArraySegment<byte> obj)
        {
		if(obj == null) throw new ArgumentNullException("obj");
		return obj.Sum(y => y);
        }
    }
    
    public enum TableId
    {
    }
    
    public class DataMgr
    {
        
        private delegate void LoadHandler(byte[] data);
        
        private delegate void ClearHandler();
        
        private Dictionary<int, DataMgr.LoadHandler> loadHandlerList = new Dictionary<int, LoadHandler>();
        
        private Dictionary<int, DataMgr.ClearHandler> clearHandlerList = new Dictionary<int, ClearHandler>();
        
        private bool isCallInit = false;
        
        private DataMessageSerializer serializer = new DataMessageSerializer();
        
        public void Init()
        {
		if (isCallInit)
			return;
		RegisterLoadHandler();
		RegisterClearHandler();
		isCallInit = true;
        }
        
        public void LoadData(TableId dataType, byte[] data)
        {
		loadHandlerList[(int)dataType](data);
        }
        
        public void ClearData(TableId[] dataTypes)
        {
		foreach (int dataType in dataTypes)
		{ 
			clearHandlerList[dataType]();
		}
        }
        
        public void ClearData(TableId dataType)
        {
		clearHandlerList[(int)dataType]();
        }
        
        public void ClearDataAll()
        {
		foreach (DataMgr.ClearHandler clearHandler in clearHandlerList.Values)
		{
			clearHandler();
		}
        }
        
        private void RegisterLoadHandler()
        {
        }
        
        private void RegisterClearHandler()
        {
        }
        
        public void SetUpRef()
        {
        }
    }
}
